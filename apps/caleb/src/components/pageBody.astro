---
import type { Page, DigitalAsset } from '@sferg989/astro-utils';
import { optimizeImages, VideoDisplay } from '@sferg989/astro-utils';

interface Props {
  content: Page['body'];
  highlights?: DigitalAsset[];
}

const { content, highlights = [] } = Astro.props;

// Optimize images in the HTML content if it exists
const optimizedContent = content?.html ? await optimizeImages(content.html) : null;
---

<!-- Critical CSS inlined for above-fold content -->
<style is:inline>
  .page-body {
    margin: 2rem 0;
    contain: content;
  }
  .content-wrapper {
    max-width: var(--content-width);
    margin: 0 auto;
    min-height: 400px; /* Reserve space to prevent CLS */
  }
  .content-skeleton {
    background: linear-gradient(90deg, rgba(255,255,255,0.1) 25%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0.1) 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
    border-radius: 4px;
    margin: 1rem 0;
  }
  @keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
  }
</style>

<article class="page-body">
  {
    optimizedContent ? (
      <div set:html={optimizedContent} class="content-wrapper" />
    ) : (
      <div class="content-wrapper">
        <!-- Loading skeleton to prevent layout shift -->
        <div class="content-skeleton" style="height: 2rem; width: 80%; margin-bottom: 1rem;"></div>
        <div class="content-skeleton" style="height: 1.5rem; width: 100%; margin-bottom: 0.5rem;"></div>
        <div class="content-skeleton" style="height: 1.5rem; width: 90%; margin-bottom: 0.5rem;"></div>
        <div class="content-skeleton" style="height: 1.5rem; width: 85%; margin-bottom: 2rem;"></div>
        <p class="content-wrapper">Loading content...</p>
      </div>
    )
  }

  {highlights.length > 0 && (
    <VideoDisplay videos={highlights} title="Highlights" />
  )}

  <nav class="back-link">
    <a href="/" class="back-button">
      &larr; Back to homepage
    </a>
  </nav>
</article>

<style>
  .content-wrapper :global(img),
  .content-wrapper :global(picture) {
    max-width: 100%;
    height: auto;
    border-radius: var(--border-radius);
    margin: 1.5rem 0;
    display: block;
    /* Let images maintain their natural aspect ratio */
  }

  .content-wrapper :global(picture img) {
    margin: 0;
    border-radius: inherit;
    /* Ensure images load smoothly */
    transition: opacity 0.3s ease;
  }

  .content-wrapper :global(img[loading="lazy"]:not(.loaded)) {
    opacity: 0.1;
    transition: opacity 0.3s ease;
  }

  .content-wrapper :global(img[loading="lazy"].loaded),
  .content-wrapper :global(img[loading="lazy"]:not([data-src])) {
    opacity: 1;
  }

  .content-wrapper :global(h2) {
    color: var(--accent-orange);
    margin-top: 2rem;
    font-size: 1.5rem;
    line-height: 1.3;
    /* Prevent layout shift */
    margin-block-start: 1.5em;
    margin-block-end: 0.75em;
  }

  .content-wrapper :global(p) {
    line-height: 1.6;
    margin: 1rem 0;
    /* Prevent layout shift */
    margin-block-start: 1em;
    margin-block-end: 1em;
  }

  .content-wrapper :global(a) {
    color: var(--primary-orange);
    text-decoration: none;
    transition: color 0.3s ease;
    /* Improve accessibility */
    text-decoration-skip-ink: auto;
  }

  .content-wrapper :global(a:hover) {
    color: var(--accent-orange);
    text-decoration: underline;
  }



  .back-link {
    margin-top: 2rem;
    text-align: center;
    /* Reserve space */
    min-height: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .back-button {
    display: inline-block;
    padding: 0.5rem 1rem;
    color: var(--text-color);
    text-decoration: none;
    transition: color 0.3s ease;
    /* Improve click target */
    min-height: 44px;
    display: flex;
    align-items: center;
    border-radius: 4px;
  }

  .back-button:hover {
    color: var(--primary-orange);
    background-color: rgba(255, 255, 255, 0.1);
  }

  /* Optimize for Core Web Vitals */
  @media (prefers-reduced-motion: reduce) {
    .content-wrapper :global(*) {
      transition: none !important;
      animation: none !important;
    }
  }
</style>

<!-- JavaScript to handle image loading and prevent layout shift -->
<script>
  // Handle lazy loaded images
  const images = document.querySelectorAll('img[loading="lazy"]');
  
  const imageObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target as HTMLImageElement;
        
        const handleLoad = () => {
          img.classList.add('loaded');
          img.removeEventListener('load', handleLoad);
          img.removeEventListener('error', handleError);
        };
        
        const handleError = () => {
          // Even on error, make image visible
          img.classList.add('loaded');
          img.removeEventListener('load', handleLoad);
          img.removeEventListener('error', handleError);
        };
        
        img.addEventListener('load', handleLoad);
        img.addEventListener('error', handleError);
        
        // Fallback: make visible after 3 seconds regardless
        setTimeout(() => {
          if (!img.classList.contains('loaded')) {
            img.classList.add('loaded');
          }
        }, 3000);
        
        imageObserver.unobserve(img);
      }
    });
  });

  images.forEach(img => imageObserver.observe(img));

  // Ensure all images are visible as fallback
  setTimeout(() => {
    document.querySelectorAll('img').forEach(img => {
      if (img.style.opacity === '0' || img.style.opacity === '0.1') {
        img.style.opacity = '1';
      }
    });
  }, 5000);
</script>
