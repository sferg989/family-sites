---
import { getImage } from 'astro:assets';

interface Props {
  src: string;
  alt: string;
  priority?: boolean;
  aspectRatio?: number;
  objectFit?: 'cover' | 'contain';
  sizes?: string; // New prop to specify actual display sizes
  maxWidth?: number; // Maximum expected display width
}

const {
  src,
  alt,
  priority = false,
  aspectRatio = 16/9,
  sizes = '(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw',
  maxWidth = 800, // Default max width for most content images
} = Astro.props;

// Function to calculate dimensions while maintaining aspect ratio
const calculateDimensions = (baseWidth: number, targetAspectRatio: number) => {
  if (targetAspectRatio < 1) {
    const height = baseWidth;
    const width = Math.round(height * targetAspectRatio);
    return { width, height };
  }
  const width = baseWidth;
  const height = Math.round(width / targetAspectRatio);
  return { width, height };
};

// Generate multiple image sizes based on common display scenarios
const imageSizes = [320, 480, 640, 800, 1024, 1280];
const relevantSizes = imageSizes.filter(size => size <= maxWidth * 2); // Include 2x for retina

const images = await Promise.all(
  relevantSizes.map(async (width) => {
    const img = await getImage({
      src: src,
      ...calculateDimensions(width, aspectRatio),
      format: 'webp',
      quality: width <= 640 ? 85 : 80, // Slightly higher quality for smaller images
    });
    return {
      ...img,
      width: width,
    };
  })
);

// Create srcset string
const srcset = images.map(img => `${img.src} ${img.width}w`).join(', ');

// Use the largest image as fallback
const fallbackImage = images[images.length - 1];
---

<div class="image-container" style={`aspect-ratio: ${aspectRatio}`}>
  <picture>
    <source 
      type="image/webp" 
      srcset={srcset}
      sizes={sizes}
    />
    <img
      src={fallbackImage.src}
      alt={alt}
      width={fallbackImage.attributes.width}
      height={fallbackImage.attributes.height}
      srcset={srcset}
      sizes={sizes}
      loading={priority ? 'eager' : 'lazy'}
      decoding={priority ? 'sync' : 'async'}
      fetchpriority={priority ? 'high' : 'auto'}
    />
  </picture>
</div>

<style>
  .image-container {
    position: relative;
    width: 100%;
    height: auto;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .image-container picture {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .image-container img {
    width: 100%;
    height: 100%;
    object-fit: var(--object-fit, contain);
    display: block;
  }
</style>

<style is:global>
  /* Ensure proper aspect ratio handling for portrait images */
  .image-container[style*="aspect-ratio: 0"] {
    aspect-ratio: auto !important;
    height: 100vh;
    max-height: 80vh;
  }
</style> 